--[[
   to keep the lua function somewhat out of the scope of the lua scripts,
   we have a c function that executes a string holding our functions.
   This isn't flexible regarding changes in the functionality but this isn't
   the aim for these scripts! Here we want to assemble information for one or 
   more stages. 

   Note: at the moment the next lines till stages = {} have no impact on the 
         stage creation!

         For now it simply reads a file and extract a tile info (solid/enter) 
         and sets a matrix of 16 columns and 15 rows that translate to 512px by
         480px and a tile size of 32px by 32px. 

   In the next iteration the functions InitAllStages and ReloadStage should also move 
   to the hardcoded part. Another stage would mostlikely have the same setup for maping
   the screens.
   
]]--
sdl2_test_lua.ImportFunctions()

-- we need this as a baseline for our lvl script reload
lvl_base_line = read_entire_file_text('scripts/sdl2_test_lvl.config')

function InitAllStages()
   print("enter")
   local lvl_block_table = load_levels('scripts/sdl2_test_lvl.config')
   local trect = 0
   local brect = 1

   local stage = sdl2_test_lua.InitStage(23, 0)
   local x = 10
   local y = 4788
   sdl2_test_lua.InitScreen(stage, 0, x , y, 512, 480, 1)
   for s = 1, 6 , 1 do
      sdl2_test_lua.InitScreen(stage, s, x , y - (s  * 240), 512, 480, 3)
   end
   sdl2_test_lua.InitScreen(stage, 7, x , y - (7 * 240), 512, 480, 10)
   x = x +256
   sdl2_test_lua.InitScreen(stage, 8, x , y - (7 * 240), 512, 480, 5)
   for s = 9, 15 , 1 do
      sdl2_test_lua.InitScreen(stage, s, x , y - ((s - 1) * 240), 512, 480, 3)
   end
   sdl2_test_lua.InitScreen(stage, 16, x , y - (15 * 240), 512, 480, 10)
   x = x + 256
   sdl2_test_lua.InitScreen(stage, 17, x , y - (15 * 240), 512, 480, 5)
   sdl2_test_lua.InitScreen(stage, 18, x , y - (16 * 240), 512, 480, 3)
   sdl2_test_lua.InitScreen(stage, 19, x , y - (17 * 240), 512, 480, 10)
   x = x + 256 
   sdl2_test_lua.InitScreen(stage, 20, x , y - (17 * 240), 512, 480, 5)
   for s = 21, 22 , 1 do
      sdl2_test_lua.InitScreen(stage, s, x , y - ((s- 3) * 240), 512, 480, 3)
   end
   sdl2_test_lua.InitScreen(stage, 23, x , y - (20 * 240), 512, 480, 2)

   for k,v in pairs(lvl_block_table) do
      local row = 0
      local col = 0
      for k2,v2 in pairs(v) do
            local bid = k2 -1
            local solid = v2["solid"]
            local enter = v2["enter"]
            sdl2_test_lua.InitBlock(stage, (k -1), bid, enter, solid)
            sdl2_test_lua.InitRect(stage, (k -1), bid, trect, 0, 0, 2, 2)
            sdl2_test_lua.InitRect(stage, (k -1), bid, brect, col * 32 , row * 32, 32, 32)
            col = (k2) % 16
            if (col == 0) and k2 > 15 then
               row = row + 1
            end 
      end
   end
   table.insert(stages,  1 ,stage)
   print("exit")
end

-- we call this function from c, since its easier to do this kind of work here 
function ReloadStage(stg)
   print("reload enter", stg)
   local foo  = read_entire_file_text('scripts/sdl2_test_lvl.config')
   if foo ~= test then
      print("reload changes", stg)
      local lvl_table = load_levels('scripts/sdl2_test_lvl.config')
      local trect = 0
      local brect = 1
      local s = stages[stg]
      for k,v in pairs(lvl_table) do
         local row = 0
         local col = 0
         for k2,v2 in pairs(v) do
               local bid = k2 -1
               local solid = v2["solid"]
               local enter = v2["enter"]
               sdl2_test_lua.InitBlock(s, (k -1), bid, enter, solid)
               sdl2_test_lua.SetRect(s, (k -1), bid, trect, 0, 0, 2, 2)
               sdl2_test_lua.SetRect(s, (k -1), bid, brect, col * 32 , row * 32, 32, 32)
               col = (k2) % 16
               if (col == 0) and k2 > 15 then
                  row = row + 1
               end 
         end
      end
      test = foo
   end
   sdl2_test_lua.PauseScript(5)
end

stages = {}

InitAllStages()